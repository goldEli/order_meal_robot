{"version":3,"sources":["utils.js","Container/Order/index.js","Container/Home/index.js","index.js"],"names":["postData","a","async","url","data","fetch","method","mode","cache","credentials","headers","redirect","referrerPolicy","body","JSON","stringify","response","json","res","status","msg","fail","Item","OrderList","props","total","nameList","length","renderHeader","wrap","map","item","name","join","Order","useState","setName","setData","then","useNameList","updateNameList","useEffect","localStorage","getItem","check","value","isEmpty","isChinese","test","type","placeholder","onChange","window","setItem","size","onClick","loading","success","Home","marqueeProps","loop","style","padding","ReactDOM","render","document","getElementById"],"mappings":"sWAEO,SAAeA,IAAf,qCAAAC,EAAAC,OAAA,uDAAwBC,EAAxB,+BAA8B,GAAIC,EAAlC,+BAAyC,GAAzC,WAAAH,EAAA,MAEkBI,MAAMF,EAAK,CAChCG,OAAQ,OACRC,KAAM,OACNC,MAAO,WACPC,YAAa,cACbC,QAAS,CACP,eAAgB,oBAGlBC,SAAU,SACVC,eAAgB,cAChBC,KAAMC,KAAKC,UAAUX,MAblB,cAECY,EAFD,kBAAAf,EAAA,MAeae,EAASC,QAftB,UAeCC,EAfD,OAiBEC,EAAeD,EAAfC,OAAQC,EAAOF,EAAPE,IAEA,IAAXD,EAnBC,wBAoBH,IAAME,KAAKD,EAAK,GApBb,kBAqBIF,GArBJ,iCAwBEA,GAxBF,sCCUP,IAAMI,EAAO,IAAKA,KAqGlB,SAASC,EAAUC,GACjB,IAAMC,EAAQD,EAAME,SAASC,OAC7B,OACE,uBAAMC,aAAc,8CAAaH,EAAb,aAClB,kBAACH,EAAD,CAAMO,MAAI,GACG,IAAVJ,EACG,SACAD,EAAME,SAASI,KAAI,SAAAC,GAAI,OAAIA,EAAKC,QAAMC,KAAK,QAQxCC,MAvGf,SAAeV,GAAQ,IAAD,EACIW,mBAAS,IADb,mBACbH,EADa,KACPI,EADO,OAXtB,WAAwB,IAAD,EACGD,mBAAS,IADZ,mBACd/B,EADc,KACRiC,EADQ,KAQrB,MAAO,CAACjC,EALR,WACEJ,EAAS,QAAQsC,MAAK,YAAe,IAAZlC,EAAW,EAAXA,KACvBA,GAAQiC,EAAQjC,QAQemC,GAFf,mBAEbb,EAFa,KAEHc,EAFG,KAIpBC,qBAAU,WACRD,MACC,IAEHC,qBAAU,WACRL,EAAQM,aAAaC,QAAQ,eAC5B,IAEH,IAKMC,EAAQ,SAAAC,GACZ,IAAMC,GAAWD,EACXE,EAAY,qBAAqBC,KAAKH,GAC5C,OAAIC,GACF,IAAMzB,KAAK,mCACJ,KAEJ0B,IACH,IAAM1B,KAAK,iEACJ,IA+BX,OACE,2BACE,4BACA,uBAAMO,aAAc,iBAAM,KACxB,uBACEqB,KAAK,eACLC,YAAY,yDACZC,SApDS,SAAAN,GACfO,OAAOV,aAAaW,QAAQ,WAAYR,GACxCT,EAAQS,IAmDFA,MAAOb,GAJT,iBASF,uBAAYsB,KAAK,OAEjB,uBAAQC,QAzCS,WACnB,IAAMC,QAAQ,aAAc,GAC5BZ,EAAMZ,IACJhC,EAAS,SAAU,CAAEgC,SAAQM,MAAK,SAAAlC,GAChCA,GAAQ,IAAMqD,QAAQrD,EAAKgB,KAC3BoB,QAoC6BS,KAAK,WAApC,gBAGA,4BACA,uBAAQM,QApCS,WACnB,IAAMC,QAAQ,aAAc,GAC5BZ,EAAMZ,IACJhC,EAAS,UAAW,CAAEgC,SAAQM,MAAK,SAAAlC,GACjCA,GAAQ,IAAMqD,QAAQrD,EAAKgB,KAC3BoB,QA+B6BS,KAAK,WAApC,gBAMA,uBAAYK,KAAK,OACjB,kBAAC/B,EAAD,CAAWG,SAAUA,MCxFZgC,MAff,SAAclC,GACZ,OACE,6BACE,uBAAY8B,KAAK,OACf,uBAAWK,aAAc,CAAEC,MAAM,EAAMC,MAAO,CAAEC,QAAS,aAAzD,iFAGF,uBAAYR,KAAK,OACjB,kBAAC,EAAD,Q,OCNNS,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,U","file":"static/js/main.4117e971.chunk.js","sourcesContent":["import {Toast} from \"antd-mobile\"\n\nexport async function postData(url = '', data = {}) {\n  // Default options are marked with *\n  const response = await fetch(url, {\n    method: 'POST', // *GET, POST, PUT, DELETE, etc.\n    mode: 'cors', // no-cors, *cors, same-origin\n    cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n    credentials: 'same-origin', // include, *same-origin, omit\n    headers: {\n      'Content-Type': 'application/json'\n      // 'Content-Type': 'application/x-www-form-urlencoded',\n    },\n    redirect: 'follow', // manual, *follow, error\n    referrerPolicy: 'no-referrer', // no-referrer, *client\n    body: JSON.stringify(data) // body data type must match \"Content-Type\" header\n  });\n  const res = await response.json(); // parses JSON response into native JavaScript objects\n  \n  const {status, msg} = res\n\n  if (status === 0) {\n    Toast.fail(msg, 2)\n    return res\n  }\n\n  return res\n}","import React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  WhiteSpace,\n  WingBlank,\n  List,\n  InputItem,\n  Toast,\n  Button\n} from \"antd-mobile\";\nimport { postData } from \"../../utils\";\n\nconst Item = List.Item;\n\nfunction useNameList() {\n  const [data, setData] = useState([]);\n\n  function updateData() {\n    postData(\"/all\").then(({ data }) => {\n      data && setData(data);\n    });\n  }\n  return [data, updateData];\n}\n\nfunction Order(props) {\n  const [name, setName] = useState(\"\");\n  const [nameList, updateNameList] = useNameList([]);\n\n  useEffect(() => {\n    updateNameList();\n  }, []);\n\n  useEffect(() => {\n    setName(localStorage.getItem(\"username\"));\n  }, []);\n\n  const onChange = value => {\n    window.localStorage.setItem(\"username\", value);\n    setName(value);\n  };\n\n  const check = value => {\n    const isEmpty = !value;\n    const isChinese = /^[\\u4e00-\\u9fa5]+$/.test(value);\n    if (isEmpty) {\n      Toast.fail(\"不能为空！\");\n      return false;\n    }\n    if (!isChinese) {\n      Toast.fail(\"请输入你的真实姓名！\");\n      return false;\n    }\n    return true;\n  };\n\n  const handleCommit = () => {\n    Toast.loading(\"Loading...\", 0);\n    check(name) &&\n      postData(\"/order\", { name }).then(data => {\n        data && Toast.success(data.msg);\n        updateNameList();\n      });\n  };\n\n  const handleCancel = () => {\n    Toast.loading(\"Loading...\", 0);\n    check(name) &&\n      postData(\"/cancel\", { name }).then(data => {\n        data && Toast.success(data.msg);\n        updateNameList();\n      });\n  };\n\n  // const handleClearAll = () => {\n  //   Toast.loading(\"Loading...\", 0);\n  //   postData(\"/clearAll\", { name }).then(data => {\n  //     data && Toast.success(data.msg);\n  //     updateNameList();\n  //   });\n  // }\n\n  return (\n    <WingBlank>\n      <WhiteSpace />\n      <List renderHeader={() => \"\"}>\n        <InputItem\n          type=\"姓名\"\n          placeholder=\"请输入你的真实姓名\"\n          onChange={onChange}\n          value={name}\n        >\n          姓名\n        </InputItem>\n      </List>\n      <WhiteSpace size=\"lg\" />\n\n      <Button onClick={handleCommit} type=\"primary\">\n        订餐\n      </Button>\n      <WhiteSpace />\n      <Button onClick={handleCancel} type=\"warning\">\n        取消\n      </Button>\n      {/* <Button onClick={handleClearAll} type=\"warning\">\n        清除所有\n      </Button> */}\n      <WhiteSpace size=\"lg\" />\n      <OrderList nameList={nameList} />\n    </WingBlank>\n  );\n}\n\nfunction OrderList(props) {\n  const total = props.nameList.length\n  return (\n    <List renderHeader={() => `已订餐 ${total} 人`}>\n      <Item wrap>\n        {total === 0\n          ? \"无\"\n          : props.nameList.map(item => item.name).join(\", \")}\n      </Item>\n    </List>\n  );\n}\n\nOrder.propTypes = {};\n\nexport default Order;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { List, WhiteSpace, WingBlank, Icon, Result, NoticeBar } from \"antd-mobile\";\nimport Order from \"../Order\";\n\nfunction Home(props) {\n  return (\n    <div>\n      <WhiteSpace size=\"lg\" />\n        <NoticeBar marqueeProps={{ loop: true, style: { padding: '0 7.5px' } }}>\n          每天 8:40 点开始订餐，9:20 结束。\n        </NoticeBar>\n      <WhiteSpace size=\"lg\" />\n      <Order />\n    </div>\n  );\n}\n\nHome.propTypes = {};\n\nexport default Home;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Home from \"./Container/Home\"\nimport 'antd-mobile/dist/antd-mobile.css';\n// import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Home />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}